[
    {
        "label": "SimpleAttack",
        "properties": {
            "build": "action.muzzleAnimation = (sprite = {}) => {\n\tlet {x, y, width, height, depth} = sprite;\n\t\t\n\tx += Phaser.Math.Between(-width / 2, width / 2);\n\ty += Phaser.Math.Between(-height / 2, height / 2);\n\tdepth++;\n\n\tconst muzzle = scene.stores.BattleObjects.create(\"MuzzleFlash1\", {x, y, depth});\n\tmuzzle.then = () => { }\n\tmuzzle.play(\"flash\", () => {\n\t\tmuzzle.then();\n\t\tmuzzle.destroy();\n\t});\n\treturn muzzle;\n};\n\n\naction.digitAnimation = (sprite = {}, text) => {\n\tconst {x, y, width, height} = sprite;\n\tconst digitsOptions = {\n\t    text,\n\t    x: (x - width / 4),\n\t    y: (y + 20 - height / 4)\n\t};\n\tconst digits = scene.stores.BattleObjects.create(\"DamageDigits\", digitsOptions);\n\tdigits.then = () => { }\n\tdigits.play(\"show\", () => {\n\t\tdigits.then();\n\t\tdigits.destroy();\n\t});\n\treturn digits;\n}",
            "resolve": "const {target, executor, options, muzzleAnimation} = action;\r\n\r\nconst executorActor = scene.findActorById(executor);\r\nconst targetActor = scene.findActorById(target);\r\n\r\n// compute damage\r\nconst factor1 = 1 + Phaser.Math.Between(0, options.dieRoll || 0);\r\nconst attack  = executorActor.getAttack();\r\nconst defense = targetActor.getDefense();\r\nconst delta   = attack - Phaser.Math.Between(0, defense);\r\nconst text = (delta > 0) ? factor1 * delta : 0;\r\nconst dmg = Number(text);\r\n//\r\n\r\n\r\n// animations\r\nconst muzzle = () => muzzleAnimation(targetActor.Sprite);\r\nconst stepUpAnimation = scene.stores.BattleObjects.create(\"AnimationStepUp\", {\r\n    Sprite: executorActor.Sprite, distance: 60, duration: 250\r\n});\r\n\r\n\r\nstepUpAnimation.play(\"two steps\", () => {\r\n\t\tstepUpAnimation.destroy();\r\n\t\ttargetActor.applyDamage(dmg);\r\n\t\tcallback();\r\n\t}, {\r\n\tisAlly: executorActor.isAlly(), \r\n\tmiddleCall: next => \r\n\t\tmuzzle().then = () => muzzle().then = () => muzzle().then = () => \r\n\t\taction.digitAnimation(targetActor.Sprite, dmg)\r\n\t\t.then = () => next()\r\n});",
            "imports": ""
        }
    },
    {
        "label": "Dissing",
        "properties": {
            "build": "",
            "resolve": "const {target, executor, options, muzzleAnimation} = action;\r\n\r\nconst executorActor = scene.findActorById(executor);\r\nconst targetActor = scene.findActorById(target);\r\n\r\nconsole.log(\"dissing\", target);\r\ntargetActor.giveMalus(\"Dissing\", \"strenght\", {percentage: true, value: 10});\r\ncallback();",
            "imports": ""
        }
    }
]